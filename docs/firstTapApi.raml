#%RAML 1.0
---
title: FirstTap
baseUri: http://firsttap.appspot.com/v1
version: 1
documentation:
  - title: Welcome
    content: |
      **Welcome to the FirstTap API, your seamless payment system for employees at Bows F1.**

      Please note that this system does not take payment itself, it simply stores and updates an employee's balance.
      The API must always be accessed using the provided login credentials in auth headers to ensure that only the designated kiosks have access.

      Individual user logins also generate session tokens which will expire after 5 minutes.


      For information on how we store data, please visit: [Privacy Policy](https://firsttap.appspot.com/docs/privacy)
/health:
  description: Check system liveness
  get:
    description: |
      **Return 200 to confirm system is live**
    responses:
      200:
        body:
          application/json:
            example: !include ./includes/responses/health-response.json

/signup:
    description: Sign up new users using existing employee id
    post:
      description: |
        **Store a new employee in the FirstTap system**

        This assumes a unique id for each user and stores them in the system DB and will not allow an employee to register with the same id more than once.
        Core employee data is required and the route will fail if values are missing from the body.

        The employee name and a usage token valid for 5 minutes will be returned. This must be included in the headers of all further API calls.

        NB employee lastName is not required.

        The signup route returns a valid session token and the user's first name.

        **Known limitations:**
        - there is currently no means of changing or resetting a pin code so employees cannot forget (!)

      body:
        application/json:
          type: !include ./includes/schemas/signup-query.json
          examples:
            basic:
              displayName: Basic user info
              value: !include ./includes/requests/signup-query.json
      headers:
        Authorization:
          type: string
          description: Basic authentication header using base64 encoded username and password credentials
          example: !include ./includes/requests/basic-auth-header.json
      responses:
        200:
          body:
            application/json:
              example: !include ./includes/responses/login-success.json
        400:
          body:
            application/json:
              example: !include ./includes/responses/bad-req.json
        401:
          body:
            application/json:
              example: !include ./includes/responses/auth-fail.json
        500:
          body:
            application/json:
              example: !include ./includes/responses/datastore-err.json

/login:
    description: Log in existing users using existing employeeId and pin code
    post:
      description: |
        **Log in an existing user**

        Retrieve a valid user token by logging in with a  valid employeeId and pincode.

        The login route returns a valid session token and the user's first name.
      body:
        application/json:
          type: !include ./includes/schemas/login-query.json
          examples:
            basic:
              displayName: Basic user info
              value: !include ./includes/requests/login-query.json
      responses:
        200:
          body:
            application/json:
              example: !include ./includes/responses/login-success.json
        400:
          body:
            application/json:
              example: !include ./includes/responses/bad-req.json
        401:
          body:
            application/json:
              example: !include ./includes/responses/auth-fail.json
        500:
          body:
            application/json:
              example: !include ./includes/responses/datastore-err.json
      headers:
        Authorization:
          type: string
          description: Basic authentication header using base64 encoded username and password credentials
          example: !include ./includes/requests/basic-auth-header.json
/balance:
    description: Top up or reduce a user's balance
    /{employeeId}:
      get:
        description: |
          **Retrieve employee's balance**

          Given a valid employeeId and session token, retrieve the user's balance.
          Though there is protection on the /balance endpoint to prevent purchases being logged if there are insufficient funds, we have exposed the balance to a logged in user to minimise the risk of this mistake.

        responses:
          200:
            body:
              application/json:
                example: !include ./includes/responses/balance-check.json
          400:
            body:
              application/json:
                example: !include ./includes/responses/bad-req.json
          401:
            body:
              application/json:
                example: !include ./includes/responses/auth-fail.json
          500:
            body:
              application/json:
                example: !include ./includes/responses/datastore-err.json
        headers:
          Authorization:
            type: string
            description: Basic authentication header using base64 encoded username and password credentials
            example: !include ./includes/requests/basic-auth-header.json
          Token:
            type: string
            description: Valid session token for employee (provided when a user signs up/logs in). We recommend storing this in a cookie with an expiry of 5 mins as it is needed for all api calls related to the user. The same token is refreshed by 5 mins on each api call so remains valid.
            example: !include ./includes/requests/session-token.json

      put:
        description: |
          **Top up an employee's balance with path using transactionType: 'topup'**

          **Detract a purchase total from an employee's balance with path using transactionType: 'purchase'**

          Given a valid employeeId and session token, add or remove the given amount to the user's balance.

          Beta feature:
          On purchase, transaction details can also be stored for later analysis. Category, itemRef and kioskRef are currently required fields if this option is chosen. These will be stored along with the employeeId, amount and timestamp.
          There is currently no endpoint for accessing this data, until there is a defined user story for analysis.
          As it is new, the transactionDetails can also be left out entirely and the app will operate as normal. Any errors in the storing process will not stop the balance from updating. 
          The structure of this data is open to debate and refinement.

          **Known limitations**
          - This is not configured to use any specific currency
          - The datastore allows 2 decimal places and figures up to 8 digits (so max Â£999999.99).
          - Currently all fields in transaction data are required.

          Should this prove insufficient, please contact us for an extension.
        body:
          application/json:
            type: !include ./includes/schemas/balance-query.json
            examples:
              topup:
                displayName: Topup
                value: !include ./includes/requests/balance-topup.json
              purchase:
                displayName: Purchase
                value: !include ./includes/requests/balance-purchase.json
              purchase-with-transaction-details:
                displayName: Purchase with Transaction details
                value: !include ./includes/requests/balance-purchase-with-transaction-details.json
        responses:
          200:
            body:
              application/json:
                example: !include ./includes/responses/balance-success.json
          400:
            body:
              application/json:
                example: !include ./includes/responses/bad-req.json
          401:
            body:
              application/json:
                example: !include ./includes/responses/auth-fail.json
          500:
            body:
              application/json:
                example: !include ./includes/responses/datastore-err.json
        headers:
          Authorization:
            type: string
            description: Basic authentication header using base64 encoded username and password credentials
            example: !include ./includes/requests/basic-auth-header.json
          Token:
            type: string
            description: Valid session token for employee (provided when a user signs up/logs in. We recommend storing this in a cookie with an expiry of 5 mins as it is needed for all api calls related to the user. The same token is refreshed by 5 mins on each api call so remains valid.
            example: !include ./includes/requests/session-token.json
